#!/usr/bin/env python3
# -*- coding: UTF-8 -*-
# Copyright (c) 2016 Andrei Tatar
# Copyright (c) 2018 Vrije Universiteit Amsterdam
#
# This program is licensed under the GPL2+.


import sys
import os

from rhsimulator.sim            import *
from rhsimulator.flip           import *
from exploits.ffs_exploit       import *
from exploits.opcode_sudo       import *
from exploits.x86pte_exploits   import *
from glob import glob

import pandas as pd
from pandas import DataFrame
import pprint as pp


def bit(x):
    return 1<<x

# NOTE add to this array what you want to grep for when you're filtering the files
# at the moment grepping for sweep-summary files 
filter_keywords = ['.json','sweep-summary-1x256MB']

if __name__ == '__main__':
    if len(sys.argv) < 2:
        print("Missing arguments")
        print("usage: {} DIR_NAME".format(sys.argv[0]))
        sys.exit(1)

    files = []
    for f in glob(f"{sys.argv[1]}/**/sweep-summary-1x256MB.json", recursive=True):
       print(f)
       files.append(f)
    #files = [os.path.join(sys.argv[1],x) for x in os.listdir(sys.argv[1]) 
    #        if all([key in x for key in filter_keywords])]

    pp.pprint(files)
    print("Are these the files you want to test [y/n]? ", end="") 
    answer = input()
    while answer not in ['y', 'n', 'Y', 'N']:
        print("[ERROR] Input not recognized") 
        print("Are these the files you want to test[y/n]? ", end="") 
        answer = input()

    if answer in ['n', 'N']:
        print("[ERROR] Not the right files")
        sys.exit(1)

    
    results = []
    for ffile in files:
        f = open(ffile, 'r')
        data = ujson.load(f)
        f.close()
         
        metadata = data['metadata']
        #TODO implemente data aggregation with multiple sweeps
        if len(data['sweeps']) > 1:
            print("[ERROR] this script currently supports a single sweep.\
                    aggregating data among multiple sweeps still need to be implemented")
        
        sweep = data['sweeps'][0] #extracting the only sweep in the file 

        ftbl = Fliptable.from_sweep(sweep, metadata, layout_ow=True)
        print(f"[+] dimm: {ftbl.dimm_id:>5}")

        # FlipPFN
        expl_name = 'FlipPFN(16GB)'
        est = FliptableEstimator(ftbl)
        est.run_exploit(FlipPFN(16<<30)) 
        data = est.get_csv_stats(expl_name)
        results.append(data)
        print(f"\t{expl_name:>20}: {data['tot_expl_flip_str']:>40}")

        # OpcodeFlip 
        expl_name = 'OpcodeFlip'
        est.run_exploit(OpcodeFlip()) 
        data = est.get_csv_stats(expl_name)
        results.append(data)
        print(f"\t{expl_name:>20}: {data['tot_expl_flip_str']:>40}")

        # GPGFlip 
        expl_name = 'GPGFlip'
        est.run_exploit(GPGFlip())
        data = est.get_csv_stats(expl_name)
        results.append(data)
        print(f"\t{expl_name:>20}: {data['tot_expl_flip_str']:>40}")

    with open("export.csv", "w+") as f:
        pd.DataFrame(results).to_csv(f)



